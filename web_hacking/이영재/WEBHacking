SQL Injection
악의적인 사용자가 보안상의 취약점을 이용하여, 임의의 SQL문을 주입하고 실행되게 하여 데이터베이스가 비정상적인
동작을 하도록 조작하는 행위(OWASP TOP10 중 1위)

공격 종류 및 방법

1. Error based SQL Injection(논리적 에러)
SELECT*FROM Users WHERE id = 'INPUT1' AND  password = 'INPUT2'
SELECT*FROM Users WHERE id = ' ' OR 1=1 --

2. Union based SQL Injection(Union 명령어 이용)
조건: Union하는 두 테이블의 컬럼수가 같아야 한다, 데이터 형이 같아야 한다.
SELECT*FROM Board WHERE title LIKE '%LIKE '%INPUT%' OR contents '%INPUT%' (게시글 조회)
TRANSPORT↑ (' UNION SELECT null,id,passwd FROM Users--)
SELECT*FROM Board WHERE title LIKE '% 'UNION SELECT null,id,passwd FROM Users --

3. Bilind SQL injection
특정한 값이나 데이터를 전달받지 않고, 단순히 참과 거짓의 정보만 알 수 있을 때 사용
로그인 폼에 SQL Injection이 가능하다고 가정했을 때, 서버가 응답하는 로그인 성공과 로그인 실패 메시지를
이용하여 DB 테이블 정보 등을 추출해 낼 수 있다.
SELECT*FROM Users WHERE id = 'INPUT1' AND password = 'INPUT2'
SELECT*FROM Users WHERE id = 'abc123' and ASCII(SUBSTR(SELECT name FROM information_schema.tables WHERE table_type
='base table' limit 0,1),1,1)) > 100 --
위 명령어는 Blind Injection을 이용하여 DB 테이블 명을 알아내는 방법. 인젝션이 가능한 로그인 폼을 통하여
악의적인 사용자는 임의로 가입한 ABC123이라는 아이디와 함께 abc123' and ASCII(SUBSTR(SELECT name FROM information_schema.tables WHERE table_type
='base table' limit 0,1),1,1)) > 100 -- 주입 -> 해당 구문은 MTSQL에서 테이블 명을 조회하는 구문으로 limit 키워드를 통해
하나의 테이블만 조회하고, substr함수로 첫 글자만, 마지막으로 ASCII를 통해 ASCII값으로 변환해준다. 만약 조회되는 테이블 명이 Users라면 U가 ASCII값으로 조회
될 것이고 뒤의 100이라는 숫자 값과 비교를하게 된다. 거짓이면 로그인 실패가 될 것이고, 참이 될때까지 뒤의 100이라는 숫자를 변경해 가면서 비교한다.
공격자는 이 프로세스를 자동화 스크립트를 통하여 단기간 내 테이블 명을 알아 낼 수 있다.

Weak Session IDs
일반적으로 사용자가 대상 웹서버에 액세스하면 식별을 하기 위해 세션 ID를 사용자에게 할당한다. 획득한 세션ID는 사용자의
쿠기에 저장되고 유지하면서 서버와 사용자 간 식별을하게 된다. 하지만 세션ID가 단순하면 쉽게 위조가 가능해진다. 이 경우 공격자는
다른 사용자의 세션 ID를 쉽게 추측할 수 있기 때문에, 다른 사용자로 하여금 접근이 가능해질 수 있다.
